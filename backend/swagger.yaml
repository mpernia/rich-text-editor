openapi: 3.0.0
info:
  title: API Editor
  description: API for managing posts and their statuses
  version: 1.0.0
servers:
  - url: /api/v1
    description: Version 1 of the API
paths:
  /posts:
    get:
      summary: List all posts
      description: Returns a list of all posts
      operationId: listPosts
      tags:
        - Posts
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      description: Creates a new post with the provided data
      operationId: createPost
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /posts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: The post ID
    get:
      summary: Get a specific post
      description: Returns the details of a specific post
      operationId: getPost
      tags:
        - Posts
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update a post
      description: Updates an existing post with the provided data
      operationId: updatePost
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '202':
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Delete a post
      description: Deletes a specific post
      operationId: deletePost
      tags:
        - Posts
      responses:
        '204':
          description: Post deleted successfully
        '404':
          description: Post not found

  /posts/{id}/pdf:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: The post ID
    get:
      summary: Download post as PDF
      description: Downloads a specific post in PDF format
      operationId: downloadPostPdf
      tags:
        - Posts
      responses:
        '200':
          description: PDF file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Post not found

  /statuses:
    get:
      summary: List all statuses
      description: Returns a list of all available post statuses
      operationId: listStatuses
      tags:
        - Statuses
      responses:
        '200':
          description: A list of statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Status'

  /statuses/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: The status ID
    get:
      summary: Get a specific status
      description: Returns the details of a specific status
      operationId: getStatus
      tags:
        - Statuses
      responses:
        '200':
          description: Status details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Status'
        '404':
          description: Status not found

  /health:
    get:
      summary: Check API health
      description: Returns the health status of the API and its services
      operationId: checkHealth
      tags:
        - Health
      responses:
        '200':
          description: Health check response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    properties:
                      database:
                        type: boolean
                      app:
                        type: boolean

components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        summary:
          type: string
        content:
          type: string
        user_id:
          type: integer
          format: int64
        status_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreatePostRequest:
      type: object
      required:
        - title
        - summary
        - content
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        summary:
          type: string
          maxLength: 300
        content:
          type: string
          minLength: 3
          maxLength: 3000
        user_id:
          type: integer
          format: int64
        status_id:
          type: integer
          format: int64

    UpdatePostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        summary:
          type: string
          maxLength: 300
        content:
          type: string
          minLength: 3
          maxLength: 3000
        user_id:
          type: integer
          format: int64
        status_id:
          type: integer
          format: int64

    Status:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ValidationError:
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
